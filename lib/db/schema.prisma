// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(EDITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  news          News[]
  products      Product[]
  resources     Resource[]
  showcases     Showcase[]
}

// 角色枚举
enum Role {
  ADMIN
  EDITOR
}

// 新闻模型
model News {
  id          String   @id @default(cuid())
  title       Json     // 存储多语言标题 { zh: "中文标题", en: "English Title" }
  content     Json     // 存储多语言内容
  image       String?  // 图片URL
  category    String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

// 产品模型
model Product {
  id          String   @id @default(cuid())
  title       Json
  description Json
  image       String?
  category    String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

// 学习资源模型
model Resource {
  id          String   @id @default(cuid())
  title       Json
  content     Json
  type        String   // tutorial, guide, resource
  image       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

// 案例展示模型
model Showcase {
  id          String   @id @default(cuid())
  title       Json
  description Json
  image       String?
  category    String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

